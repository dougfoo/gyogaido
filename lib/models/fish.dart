import 'dart:convert';

/// Fish model class representing a fish species in the Gyo Gai Do app
/// 
/// This class matches the structure of the fish data generated by the
/// Python extraction script and stored in assets/data/fish_database.json
class Fish {
  final String id;
  final String uniqueName;
  final String description;
  final List<String> commonAliases;
  final String scientificName;
  final String japaneseNameRomaji;
  final String japaneseNameKanji;
  final String lifespan;
  final String size;
  final String weight;
  final List<String> habitats;
  final List<String> waysToEat;
  final List<String> sushiImages;
  final List<String> wildImages;
  final String habitatMapImage;

  const Fish({
    required this.id,
    required this.uniqueName,
    required this.description,
    required this.commonAliases,
    required this.scientificName,
    required this.japaneseNameRomaji,
    required this.japaneseNameKanji,
    required this.lifespan,
    required this.size,
    required this.weight,
    required this.habitats,
    required this.waysToEat,
    required this.sushiImages,
    required this.wildImages,
    required this.habitatMapImage,
  });

  /// Create a Fish object from a Map (typically from JSON)
  factory Fish.fromMap(Map<String, dynamic> map) {
    return Fish(
      id: map['id'] as String,
      uniqueName: map['unique_name'] as String,
      description: map['description'] as String,
      commonAliases: List<String>.from(map['common_aliases'] as List),
      scientificName: map['scientific_name'] as String,
      japaneseNameRomaji: map['japanese_name_romaji'] as String,
      japaneseNameKanji: map['japanese_name_kanji'] as String,
      lifespan: map['lifespan'] as String,
      size: map['size'] as String,
      weight: map['weight'] as String,
      habitats: List<String>.from(map['habitats'] as List),
      waysToEat: List<String>.from(map['ways_to_eat'] as List),
      sushiImages: List<String>.from(map['sushi_images'] as List),
      wildImages: List<String>.from(map['wild_images'] as List),
      habitatMapImage: map['habitat_map_image'] as String,
    );
  }

  /// Convert Fish object to Map (for database storage)
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'unique_name': uniqueName,
      'description': description,
      'common_aliases': commonAliases,
      'scientific_name': scientificName,
      'japanese_name_romaji': japaneseNameRomaji,
      'japanese_name_kanji': japaneseNameKanji,
      'lifespan': lifespan,
      'size': size,
      'weight': weight,
      'habitats': habitats,
      'ways_to_eat': waysToEat,
      'sushi_images': sushiImages,
      'wild_images': wildImages,
      'habitat_map_image': habitatMapImage,
    };
  }

  /// Create a Fish object from JSON string
  factory Fish.fromJson(String jsonStr) {
    final Map<String, dynamic> map = 
        Map<String, dynamic>.from(json.decode(jsonStr));
    return Fish.fromMap(map);
  }

  /// Convert Fish object to JSON string
  String toJson() {
    return json.encode(toMap());
  }

  /// Create a copy of this Fish with modified fields
  Fish copyWith({
    String? id,
    String? uniqueName,
    String? description,
    List<String>? commonAliases,
    String? scientificName,
    String? japaneseNameRomaji,
    String? japaneseNameKanji,
    String? lifespan,
    String? size,
    String? weight,
    List<String>? habitats,
    List<String>? waysToEat,
    List<String>? sushiImages,
    List<String>? wildImages,
    String? habitatMapImage,
  }) {
    return Fish(
      id: id ?? this.id,
      uniqueName: uniqueName ?? this.uniqueName,
      description: description ?? this.description,
      commonAliases: commonAliases ?? this.commonAliases,
      scientificName: scientificName ?? this.scientificName,
      japaneseNameRomaji: japaneseNameRomaji ?? this.japaneseNameRomaji,
      japaneseNameKanji: japaneseNameKanji ?? this.japaneseNameKanji,
      lifespan: lifespan ?? this.lifespan,
      size: size ?? this.size,
      weight: weight ?? this.weight,
      habitats: habitats ?? this.habitats,
      waysToEat: waysToEat ?? this.waysToEat,
      sushiImages: sushiImages ?? this.sushiImages,
      wildImages: wildImages ?? this.wildImages,
      habitatMapImage: habitatMapImage ?? this.habitatMapImage,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Fish && other.id == id;
  }

  @override
  int get hashCode => id.hashCode;

  @override
  String toString() {
    return 'Fish(id: $id, uniqueName: $uniqueName, scientificName: $scientificName)';
  }

  /// Get the primary sushi image for this fish
  String get primarySushiImage {
    return sushiImages.isNotEmpty ? sushiImages.first : '';
  }

  /// Get the primary wild image for this fish
  String get primaryWildImage {
    return wildImages.isNotEmpty ? wildImages.first : '';
  }

  /// Get all aliases including Japanese names
  List<String> get allAliases {
    return [
      ...commonAliases,
      japaneseNameRomaji,
      if (japaneseNameKanji.isNotEmpty) japaneseNameKanji,
    ];
  }

  /// Check if the fish matches a search query
  bool matchesSearch(String query) {
    final lowerQuery = query.toLowerCase();
    
    return uniqueName.toLowerCase().contains(lowerQuery) ||
           scientificName.toLowerCase().contains(lowerQuery) ||
           description.toLowerCase().contains(lowerQuery) ||
           japaneseNameRomaji.toLowerCase().contains(lowerQuery) ||
           japaneseNameKanji.contains(query) ||
           commonAliases.any((alias) => 
               alias.toLowerCase().contains(lowerQuery)) ||
           habitats.any((habitat) => 
               habitat.toLowerCase().contains(lowerQuery)) ||
           waysToEat.any((way) => 
               way.toLowerCase().contains(lowerQuery));
  }

  /// Get habitat regions as a comma-separated string
  String get habitatString {
    return habitats.join(', ');
  }

  /// Get ways to eat as a comma-separated string
  String get waysToEatString {
    return waysToEat.join(', ');
  }

  /// Get common aliases as a comma-separated string
  String get aliasesString {
    return commonAliases.join(', ');
  }
}